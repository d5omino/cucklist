// <auto-generated />

using System;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Cucklist.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180225191459_changedsomemoreshit")]
    partial class changedsomemoreshit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion","2.0.1-rtm-125")
            .HasAnnotation("SqlServer:ValueGenerationStrategy",SqlServerValueGenerationStrategy.IdentityColumn);

        modelBuilder.Entity("Cucklist.Models.ApplicationUser",b =>
           {
           b.Property<string>("Id")
                    .ValueGeneratedOnAdd();

           b.Property<int>("AccessFailedCount");

           b.Property<int>("Age");

           b.Property<byte[]>("AvatarImage");

           b.Property<int>("BiologicalSex");

           b.Property<DateTime>("BirthDay");

           b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();

           b.Property<int>("CuckRole");

           b.Property<string>("Email")
                    .HasMaxLength(256);

           b.Property<bool>("EmailConfirmed");

           b.Property<int>("Ethnicity");

           b.Property<int>("EyeColor");

           b.Property<int>("HairColor");

           b.Property<int>("Height");

           b.Property<bool>("LockoutEnabled");

           b.Property<DateTimeOffset?>("LockoutEnd");

           b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256);

           b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256);

           b.Property<string>("PasswordHash");

           b.Property<string>("PhoneNumber");

           b.Property<bool>("PhoneNumberConfirmed");

           b.Property<int>("Race");

           b.Property<string>("SecurityStamp");

           b.Property<int>("Sexuality");

           b.Property<int>("SkinColor");

           b.Property<bool>("TwoFactorEnabled");

           b.Property<string>("UserName")
                    .HasMaxLength(256);

           b.Property<int>("Weight");

           b.HasKey("Id");

           b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

           b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

           b.ToTable("AspNetUsers");
           });

        modelBuilder.Entity("Cucklist.Models.Image",b =>
           {
           b.Property<int>("ImageId")
                    .ValueGeneratedOnAdd();

           b.Property<string>("ApplicationUserId");

           b.Property<string>("FileName")
                    .IsRequired()
                    .HasMaxLength(250);

           b.Property<int>("Height");

           b.Property<long>("ImageData");

           b.Property<string>("Name");

           b.Property<string>("PathToImage")
                    .IsRequired();

           b.Property<long>("Size");

           b.Property<int>("Width");

           b.HasKey("ImageId");

           b.HasIndex("ApplicationUserId");

           b.ToTable("Images");
           });

        modelBuilder.Entity("Cucklist.Models.Post",b =>
           {
           b.Property<int>("PostId")
                    .ValueGeneratedOnAdd();

           b.Property<string>("Description");

           b.Property<string>("Link")
                    .IsRequired();

           b.Property<string>("Owner");

           b.Property<int>("PostType");

           b.Property<string>("Title");

           b.Property<string>("UserId");

           b.HasKey("PostId");

           b.ToTable("Post");
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole",b =>
           {
           b.Property<string>("Id")
                    .ValueGeneratedOnAdd();

           b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();

           b.Property<string>("Name")
                    .HasMaxLength(256);

           b.Property<string>("NormalizedName")
                    .HasMaxLength(256);

           b.HasKey("Id");

           b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

           b.ToTable("AspNetRoles");
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",b =>
           {
           b.Property<int>("Id")
                    .ValueGeneratedOnAdd();

           b.Property<string>("ClaimType");

           b.Property<string>("ClaimValue");

           b.Property<string>("RoleId")
                    .IsRequired();

           b.HasKey("Id");

           b.HasIndex("RoleId");

           b.ToTable("AspNetRoleClaims");
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",b =>
           {
           b.Property<int>("Id")
                    .ValueGeneratedOnAdd();

           b.Property<string>("ClaimType");

           b.Property<string>("ClaimValue");

           b.Property<string>("UserId")
                    .IsRequired();

           b.HasKey("Id");

           b.HasIndex("UserId");

           b.ToTable("AspNetUserClaims");
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",b =>
           {
           b.Property<string>("LoginProvider");

           b.Property<string>("ProviderKey");

           b.Property<string>("ProviderDisplayName");

           b.Property<string>("UserId")
                    .IsRequired();

           b.HasKey("LoginProvider","ProviderKey");

           b.HasIndex("UserId");

           b.ToTable("AspNetUserLogins");
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>",b =>
           {
           b.Property<string>("UserId");

           b.Property<string>("RoleId");

           b.HasKey("UserId","RoleId");

           b.HasIndex("RoleId");

           b.ToTable("AspNetUserRoles");
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>",b =>
           {
           b.Property<string>("UserId");

           b.Property<string>("LoginProvider");

           b.Property<string>("Name");

           b.Property<string>("Value");

           b.HasKey("UserId","LoginProvider","Name");

           b.ToTable("AspNetUserTokens");
           });

        modelBuilder.Entity("Cucklist.Models.Image",b =>
           {
           b.HasOne("Cucklist.Models.ApplicationUser","ApplicationUser")
                    .WithMany()
                    .HasForeignKey("ApplicationUserId");
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",b =>
           {
           b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",b =>
           {
           b.HasOne("Cucklist.Models.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",b =>
           {
           b.HasOne("Cucklist.Models.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>",b =>
           {
           b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);

           b.HasOne("Cucklist.Models.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
           });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>",b =>
           {
           b.HasOne("Cucklist.Models.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
           });
#pragma warning restore 612, 618
        }
    }
}
